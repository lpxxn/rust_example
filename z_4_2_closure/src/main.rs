fn main() {
    let x = vec![1, 2, 3];
    println!("x {:?}", x);
    let equal_to_x = move |z| z == x;
    // 上面已经 move了，所以下面这个会报错
    //println!("x {:?}", x);
    let y = vec![1, 2, 3];
    assert!(equal_to_x(y));
}


/* 闭包可以通过三种方式捕获其环境，他们对应函数的三种获取参数的方式: 获取所有权、可恋借用、不可变借用。
这三种捕获值的方式被编码为如下三个Fn trait:
1. FnOnce 消费从周围作用域捕获的变量，闭包周围的作用域被称为其环境。为了消费捕获到的变量，闭包必须
    获取其所有权并在定义闭包时将其移进闭包。其名称Once部分代表了闭包不能多次获取相同变量的所有权。
2. FnMut 获取可变的借用值，所以可以改变其环境。
3. Fn 从其环境获取不可变的借用值。
当创建一个闭包时，rust会根据其环境中的变量来推断我们希望如何引用环境。由于所有闭包老阳可以被调用至少
一次，因此所有的闭包都实现了FnOnce。没有移动被捕获变量的所有权到闭包的闭包也实现了Fnmut,而不需要参考捕获
变量进行可变访问的闭包实现了Fn

*/