



/*

Weak	                                    Rc
不计数	                                    引用计数
不拥有所有权	                                拥有值的所有权
不阻止值被释放(drop)	                        所有权计数归零，才能 drop
引用的值存在返回 Some，不存在返回 None	        引用的值必定存在
通过 upgrade 取到 Option<Rc<T>>，然后再取值	通过 Deref 自动解引用，取值无需任何操作
通过这个对比，可以非常清晰的看出 Weak 为何这么弱，而这种弱恰恰非常适合我们实现以下的场景：

持有一个 Rc 对象的临时引用，并且不在乎引用的值是否依然存在
阻止 Rc 导致的循环引用，因为 Rc 的所有权机制，会导致多个 Rc 都无法计数归零
使用方式简单总结下：对于父子引用关系，可以让父节点通过 Rc 来引用子节点，然后让子节点通过 Weak 来引用父节点。
 */